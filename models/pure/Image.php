<?php

namespace app\models\pure;

use Imagine\Image\Box;
use Yii;
use yii\base\Exception;
use yii\db\ActiveRecord;
use yii\db\Connection;
use yii\helpers\FileHelper;
use yii\helpers\Url;
use yii\web\UploadedFile;

/**
 * This is the model class for table "{{%image}}".
 *
 * @property int $id
 * @property string $name
 * @property string $path
 * @property int $size
 * @property int width
 * @property int height
 * @property string $path_modified
 * @property string $thumbnail_path
 * @property int $visible
 * @property string $date_created
 * @property string $date_updated
 *
 * @property ImageCreator[] $imageCreators
 * @property User[] $users
 * @property ImageShape[] $imageShapes
 * @property Shape[] $shapes
 */
class Image extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */

    public $shape_available_count;
    public $shapes_all_count;
    public $image_creator;
    public $testing_id;
    public $image;
    public $images;

    public $thumbnail;

    public static function tableName()
    {
        return '{{%image}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'path', 'visible', 'thumbnail_path', 'height', 'width', "size"], 'required'],
            [['visible', 'size', 'height', 'width'], 'integer'],
            [['date_created', 'date_updated'], 'safe'],
            ['thumbnail', 'file', 'skipOnEmpty' => true],
            [['images'], 'file', 'skipOnEmpty' => true, 'extensions' => ['png', 'jpg', 'dmp'], "maxFiles" => 25, 'maxSize' => 1024 * 1024 * 1024],
            [['image'], 'file', 'skipOnEmpty' => true, 'maxSize' => 1024 * 1024 * 1024],
            [['name'], 'string', 'max' => 128],
            [['path', 'thumbnail_path', 'path_modified'], 'string', 'max' => 512],
        ];
    }

    public function getAttributes($names = null, $except = [])
    {
        $result = parent::getAttributes($names, $except);

        $result["image"] = $this->path ? Url::base(true) . "/" . $this->path : false;
        $result["thumbnail"] = $this->thumbnail_path ? Url::base(true) . "/" . $this->thumbnail_path : false;

        if ($this->testing_id)
            $result["testing_id"] = $this->testing_id;

        return $result;
    }


    public function getPrettyName()
    {
        $count = ImageShape::findBySql("select * from image_shape where image_shape.image_id=$this->id and deleted=0")->count("*");
        $user = User::findBySql("select user.* from user
            inner join image_creator on user_id=user.id and user.image_id=$this->id")->one();
        $user_str = "";
        if ($user)
            $user_str = "($user->username)";

        return "$this->id : $this->name [$count] $user_str";

    }


    public function getFullImagePath()
    {

        if ($this->path)
            return Url::base(true) . "/$this->path";
        return "";

    }

    public function getFullThumbnailPath()
    {

        if ($this->path)
            return Url::base(true) . "/$this->thumbnail_path";
        return "";

    }

    public static function getAllAvailable()
    {
        return Image::findBySql("select image.* from image
              inner join image_shape on image_shape.image_id=image.id and deleted=0
              where image.visible=1")->all();
    }


    public function save($runValidation = true, $attributeNames = null)
    {


        if ($this->image instanceof UploadedFile || $this->image = UploadedFile::getInstance($this, 'image')) {
            if (Yii::$app->user->id) {

                try {
                    FileHelper::createDirectory("upload/image/" . Yii::$app->user->id);
                    FileHelper::createDirectory("upload/image/" . Yii::$app->user->id . "/thumbnail");
                } catch (Exception $e) {

                }
            }
            $this->thumbnail_path = $this->getThumbnailPath();

            $path = $this->getImagePath(false);
            $this->path = $path . "." . $this->image->extension;

            list($this->width, $this->height) = getimagesize($this->image->tempName);


//            $this->path_modified = $path . "_modified.png";
            $this->name = $this->image->name;
            $this->size = $this->image->size;
            $this->visible = 1;


            if ($this->validate()) {

                $result = parent::save(false, $attributeNames); // TODO: Change the autogenerated stub

                if ($result) {


                    try {

                        $imagine = \yii\imagine\Image::getImagine()->open($this->image->tempName);
                        $scale = $imagine->getSize()->getWidth() / $imagine->getSize()->getHeight();


                        $this->image->saveAs($this->path);
                        $imagine->thumbnail(new Box(100, 100 / $scale))->save($this->thumbnail_path, ['quality' => 90]);
//                        $this->convertImageJpgToPng($this->path, $path);
                    } catch (\Exception $e) {

                        return die($e->getMessage());
                    }
                }


                return $result;
            } else {
                die(json_encode($this->getFirstErrors()) . $this->image->extension);

            }


        } else if (!$this->isNewRecord) {
            die("else");
            return parent::save();
        }


        return false;
    }


    public
    function delete()
    {
        parent::delete();
        if (file_exists($this->path))
            unlink($this->path);
        if (file_exists($this->thumbnail_path))
            unlink($this->thumbnail_path);
        if (file_exists($this->path_modified))
            unlink($this->path_modified);


    }


    private
    function convertImageJpgToPng($imageIncoming, $path)
    {


        if ((exif_imagetype($imageIncoming) == IMAGETYPE_JPEG)) {


            $image = imagecreatefromjpeg($imageIncoming);

        } else if ((exif_imagetype($imageIncoming) == IMAGETYPE_PNG)) {


            $image = imagecreatefrompng($imageIncoming);
        } else// if ((exif_imagetype($imageIncoming) == IMAGETYPE_BMP))
        {


            $image = imagecreatefrombmp($imageIncoming);
        }


        //make white to transparent
        $this->changeColorsToTransparent($image);


        imagepng($image, "{$path}_modified.png");


        return true;
    }


    private
    function changeColorsToTransparent($image)
    {
        $RED_MAX = 200;
        $GREEN_MAX = 200;
        $BLUE_MAX = 200;


        $x_length = imagesx($image);
        $y_length = imagesy($image);
        $replace_color = imagecolorallocate($image, 255, 255, 255);


        imagetruecolortopalette($image, false, 256);

        for ($index = 0; $index < imagecolorstotal($image); $index++) {
            $colors = imagecolorsforindex($image, $index);
            if ($colors['red'] > $RED_MAX && $colors['green'] >= $GREEN_MAX && $colors['blue'] >= $BLUE_MAX) {
                imagecolorset($image, $index, 0, 0, 0, 127);

            }
        }


    }


    public
    function getImagePath($extension = true)
    {


        if (!$this->image) return "";
        $user_appender = Yii::$app->user->id ? Yii::$app->user->id . "/" : "";
        $path = "upload/image/$user_appender" . strtotime("now") . rand();

        if ($extension)
            return $path . "." . $this->image->extension;
        return $path;

    }

    public
    function getThumbnailPath()
    {


        if (!$this->image) return "";
        $user_appender = Yii::$app->user->id ? Yii::$app->user->id . "/thumbnail/" : "thumbnail/";
        return "upload/image/$user_appender" . strtotime("now") . rand() . "." . $this->image->extension;

    }

    /**
     * {@inheritdoc}
     */
    public
    function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'name' => Yii::t('app', 'Name'),
            'width' => Yii::t('app', 'Width'),
            'height' => Yii::t('app', 'Height'),
            'image_creator' => Yii::t('app', 'Creator'),
            'shapes_all_count' => Yii::t('app', 'Shapes'),
            'thumbnail_path' => Yii::t('app', 'Thumbnail'),
            'path' => Yii::t('app', 'Path'),
            'visible' => Yii::t('app', 'Visible'),
            'date_created' => Yii::t('app', 'Date Created'),
            'date_updated' => Yii::t('app', 'Date Updated'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public
    function getImageCreators()
    {
        return $this->hasMany(ImageCreator::className(), ['image_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public
    function getUsers()
    {
        return $this->hasMany(User::className(), ['id' => 'user_id'])->viaTable('{{%image_creator}}', ['image_id' => 'id']);
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public
    function getImageShapes()
    {
        return $this->hasMany(ImageShape::className(), ['image_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public
    function getShapes()
    {
        return $this->hasMany(Shape::className(), ['id' => 'shape_id'])->viaTable('{{%image_shape}}', ['image_id' => 'id']);
    }

    /**
     * Executes query and returns a single row of result.
     * @param $user_id
     * @param $id
     * If `null`, the DB connection returned by [[modelClass]] will be used.
     * @return ActiveRecord|array|null a single row of query result. Depending on the setting of [[asArray]],
     * the query result may be either an array or an ActiveRecord object. `null` will be returned
     * if the query results in nothing.
     */
    public
    static function getRestricted($user_id, $id)
    {

        return Image::findBySql(" select image.* from image
    inner join image_creator on image_creator.image_id=image.id and 
                                (image_creator.user_id='{$user_id}' or exists(select user_manager.user_id  from user_manager where image_creator.user_id=user_manager.user_id and user_manager.manager_id='{$user_id}'))
    where image.id='$id' "
        )->one();
    }


    public
    static function getAllRestricted($user_id = null)
    {
        $user_id = $user_id ? $user_id : Yii::$app->user->id;
        if (Yii::$app->user->identity->isAdmin) {
            return self::findBySql("select image.* from image
  inner join image_creator on image_creator.image_id=image.id group by image.id ")->all();
        } else if (Yii::$app->user->identity->isManager) {
            return self::findBySql("select image.* from image
    inner join image_creator on image_creator.image_id=image.id and 
                                (image_creator.user_id='{$user_id}' or exists(select user_manager.user_id  from user_manager where image_creator.user_id=user_manager.user_id and user_manager.manager_id='{$user_id}'))")->all();
            return [];
        }


    }

    public
    function getSizeMB()
    {
        return self::formatBytes(intval($this->size));
    }

    public
    static function formatBytes($size, $base = 2)
    {


        $base = log($size) / log(1024);
        $suffix = array("", "KB", "MB", "GB", "TB")[floor($base)];
        return round(pow(1024, $base - floor($base)), 2) . " " . $suffix;
    }
}
